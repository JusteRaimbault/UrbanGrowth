import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")

val growthRate = Val[Double]

val id = Val[Int]

// Reporters
val logmse=Val[Double]
val mselog=Val[Double]

// config files
val popFile=Val[File]
val distFile=Val[File]
val dateFile=Val[File]

// Model
val model =
  ScalaTask(
    """
      |import urbangrowth.models.coevolution._
      |import urbangrowth.indicators._
      | val res = Coevolution(input.popFile, input.distFile,null, input.dateFile,input.growthRate,input.gravityWeight, input.gravityGamma, input.gravityDecay, 0.0, 1.0, 1.0).run()
      | val logmse = res.logmse
      | val mselog = res.mselog
    """.stripMargin
  ) set (
    //plugins += pluginsOf(urbangrowth.models.coevolution.Coevolution),
    inputs += (popFile,distFile,dateFile,growthRate,id),
    outputs += (growthRate,id),
    outputs += (logmse,mselog)
  )
val modelCapsule = Capsule(model)

val popFileNames = Seq("FR_pops.csv","CN_pops.csv")
val distFileNames = Seq("FR_dist.csv","CN_dist.csv")
val datesFileNames = Seq("FR_dates.csv","CN_dates.csv")

def calib(i: Int) = {
  val fileSetting = ExplorationTask(
    (popFile in Seq( workDirectory / "data" / popFileNames(i))) x
    (distFile in Seq(workDirectory / "data"/ distFileNames(i))) x
    (dateFile in Seq(workDirectory / "data" / datesFileNames(i))) x
    (id in Seq(1))
  ) set(
    inputs += (growthRate),
    outputs += (growthRate)
  )

  val eval = fileSetting -< model


  val modelname = "gibrat"
  val datestr = (new SimpleDateFormat("yyyyMMdd")).format(new Date()).toString
  val purpose = "TEST"
  val resdir = purpose+"_"+modelname+"_"+"_"+i+"_"+datestr

  val island =
  NSGA2Evolution(
    genome =
      Seq(
        growthRate in Range(0.0, 0.1)
      ),
      mu = 200,
      objectives = Seq(mselog,logmse),
      evaluation = eval,
      termination = 2 hours,
      parallelism = 200,
      distribution = Island(100)
  )


  // Define the hook to save the results
  val savePopulation = SavePopulationHook(island, workDirectory / "calib" / resdir)

  val grid = EGIEnvironment("vo.complex-systems.eu")
  //val local = LocalEnvironment(20)

  island on grid hook savePopulation
  //island on local hook savePopulation
}

val firstCapsule = Capsule(EmptyTask())
val runs = (0 to 1 by 1).map(calib)
runs.map(firstCapsule -- _).reduce(_ & _)
