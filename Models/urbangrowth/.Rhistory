'intgibphysical_RU'='CALIB_intgibphysical_RU_20180922_142217',
'mariusrestr_ZA'='CALIB_mariusrestr_ZA_20180922_214658',
'mariusrestr_CN'='CALIB_mariusrestr_CN_20180922_201353',
'mariusrestr_US'='CALIB_mariusrestr_US_20180922_221801',
'mariusrestr_BR'='CALIB_mariusrestr_BR_20180922_194248',
'mariusrestr_EU'='CALIB_mariusrestr_EU_20180922_224907',
'mariusrestr_IN'='CALIB_mariusrestr_IN_20180922_204500',
'mariusrestr_RU'='CALIB_mariusrestr_RU_20180922_211602'
)
systembounds=list(
'BR'=c('logmse'=1000,'mselog'=1e10),
'IN'=c('logmse'=1000,'mselog'=1e10),
'ZA'=c('logmse'=1000,'mselog'=1e10),
'US'=c('logmse'=1000,'mselog'=1e10),
'RU'=c('logmse'=1000,'mselog'=1e10),
'EU'=c('logmse'=1000,'mselog'=1e10),
'CN'=c('logmse'=1000,'mselog'=1e10)
)
populations = list()
popcolnames=c()
for(popname in names(popdirs)){
populations[[popname]] = read.csv(paste0(sourcedir,popdirs[[popname]],'/population',latestgen(paste0(sourcedir,popdirs[[popname]])),'.csv'))
popcolnames=append(popcolnames,colnames(populations[[popname]]))
}
popcolnames=unique(c(popcolnames,'model','system'))
# aggregate with model and system
pop = data.frame(matrix(rep(0,length(popcolnames)),ncol=length(popcolnames)))
colnames(pop)=popcolnames
for(model in models){
for(system in systems){
currentdata = populations[[paste0(model,'_',system)]]
if(!is.null(currentdata)){
show(paste0(model,'_',system))
show(dim(currentdata))
for(col in popcolnames[!popcolnames%in%colnames(currentdata)]){currentdata[,col]=rep(NA,nrow(currentdata))}
currentdata[,"system"]=rep(system,nrow(currentdata));currentdata[,"model"]=rep(model,nrow(currentdata))
#filter with system bounds
currentdata = currentdata[currentdata$logmse<systembounds[[system]][['logmse']]&currentdata$mselog<systembounds[[system]][['mselog']],]
#pop=rbind(pop,cbind(currentdata,model=rep(model,nrow(currentdata)),system=rep(system,nrow(currentdata))))
pop=rbind(pop,currentdata)
}
}
}
pop=as.tbl(pop[2:nrow(pop),])
list.files(dir)
dir='calibration/CALIB_intgib_BR_20180921_173302'
list.files(dir)
help("list.files")
list.files(dir,pattern=".csv")
latestgen <- function(dir){
max(as.integer(sapply(strsplit(sapply(strsplit(
list.files(dir,pattern=".csv"),"population"),function(s){s[2]}),".csv"),function(s){s[1]})))}
populations = list()
popcolnames=c()
for(popname in names(popdirs)){
populations[[popname]] = read.csv(paste0(sourcedir,popdirs[[popname]],'/population',latestgen(paste0(sourcedir,popdirs[[popname]])),'.csv'))
popcolnames=append(popcolnames,colnames(populations[[popname]]))
}
popcolnames=unique(c(popcolnames,'model','system'))
# aggregate with model and system
pop = data.frame(matrix(rep(0,length(popcolnames)),ncol=length(popcolnames)))
colnames(pop)=popcolnames
for(model in models){
for(system in systems){
currentdata = populations[[paste0(model,'_',system)]]
if(!is.null(currentdata)){
show(paste0(model,'_',system))
show(dim(currentdata))
for(col in popcolnames[!popcolnames%in%colnames(currentdata)]){currentdata[,col]=rep(NA,nrow(currentdata))}
currentdata[,"system"]=rep(system,nrow(currentdata));currentdata[,"model"]=rep(model,nrow(currentdata))
#filter with system bounds
currentdata = currentdata[currentdata$logmse<systembounds[[system]][['logmse']]&currentdata$mselog<systembounds[[system]][['mselog']],]
#pop=rbind(pop,cbind(currentdata,model=rep(model,nrow(currentdata)),system=rep(system,nrow(currentdata))))
pop=rbind(pop,currentdata)
}
}
}
pop=as.tbl(pop[2:nrow(pop),])
g = ggplot(pop,aes(x = mselog,y=logmse,color=model))
g+geom_point(pch='+',alpha=0.5)+facet_wrap(~system,scales = 'free')
g+geom_point(pch='+')+facet_wrap(~system,scales = 'free')+
stdtheme+ theme(legend.justification=c(1,0), legend.position=c(0.95,-0.05))
g+geom_point(alpha=0.8)+facet_wrap(~system,scales = 'free')+
stdtheme+ theme(legend.justification=c(1,0), legend.position=c(0.5,-0.05))
g+geom_point(alpha=0.8)+facet_wrap(~system,scales = 'free')+
stdtheme+ theme(legend.justification=c(1,0), legend.position=c(0.5,0.0))
targetDir
resdir
g+geom_point(pch='+',alpha=0.9)+facet_wrap(~system,scales = 'free')+
stdtheme+ theme(legend.justification=c(1,0), legend.position=c(0.5,0.0))
ggsave(file=paste0(resdir,'allmodels_allsystems.png'),width=30,height = 20,units='cm')
g = ggplot(pop[pop$system=='IN'&pop$logmse<32.5&pop$mselog<100,],aes(x = mselog,y=logmse,color=model))
g+geom_point(pch='+',alpha=0.9)+
stdtheme+ theme(legend.justification=c(1,0), legend.position=c(0.5,0.0))
g+geom_point(pch='+',alpha=0.9)+stdtheme
g = ggplot(pop[pop$system=='IN'&pop$logmse<32.5&pop$mselog<100,],aes(x = mselog,y=logmse,color=model))
g = ggplot(pop[pop$system=='IN'&pop$logmse<32.5&pop$mselog<100,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.7)+stdtheme
g = ggplot(pop[pop$system=='IN'&pop$logmse<32.5&pop$mselog<100,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.5)+stdtheme
ggsave(file=paste0(resdir,'IN_zoomed.png'),width=20,height = 18,units='cm')
g+geom_point(alpha=0.5)+stdtheme+ggtitle('India (zoomed)')
ggsave(file=paste0(resdir,'IN_zoomed.png'),width=20,height = 18,units='cm')
summary(pop$gravityWeight)
summary(pop$gravityDecay)
g = ggplot(pop[pop$system=='BR'&pop$mselog<200,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.5)+stdtheme+ggtitle('Brazil (zoomed)')
ggsave(file=paste0(resdir,'BR_zoomed.png'),width=20,height = 18,units='cm')
g = ggplot(pop[pop$system=='IN'&pop$logmse<32.5&pop$mselog<100,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.5)+stdtheme+ggtitle('India (zoomed)')
ggsave(file=paste0(resdir,'IN_zoomed.png'),width=22,height = 18,units='cm')
g = ggplot(pop[pop$system=='BR'&pop$mselog<200,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.5)+stdtheme+ggtitle('Brazil (zoomed)')
ggsave(file=paste0(resdir,'BR_zoomed.png'),width=22,height = 18,units='cm')
g = ggplot(pop[pop$system=='CN'&pop$mselog<220&pop$logmse<33.5,],aes(x = mselog,y=logmse,color=model))
g = ggplot(pop[pop$system=='CN'&pop$mselog<220&pop$logmse<33.5,],aes(x = mselog,y=logmse,color=model))
g+geom_point(alpha=0.5)+stdtheme+ggtitle('China (zoomed)')
ggsave(file=paste0(resdir,'CN_zoomed.png'),width=22,height = 18,units='cm')
system='CN'
cpop = pop[pop$system==system,]
cpop[cpop$logmse==min(cpop$logmse),]
cpop[cpop$logmse==min(cpop$logmse),'model']
cpop[cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),]
cpop$logmse[cpop$model=='gibrat']
min(cpop$logmse[cpop$model=='gibrat'])
cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat'])
cpop[cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),]
cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),]
runmodel<-function(args){
system(paste0('cd ../urbangrowth;sbt "run ',args,'"'))
}
runRestrMarius<-function(economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay){
runmodel(paste0(c("Marius ",economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay),collapse = ' '))
}
source('functions.R')
getwd()
setwd('..')
source('../functions.R')
getwd()
source('../Analysis/functions.R')
cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),]
runGibrat(system,0.0334)
source('../Analysis/functions.R')
runGibrat(system,0.0334)
runGibrat(system,0.0334)
runGibrat(system,0.0334)
runGibrat(system,0.0334)
runmodel<-function(args){
system(paste0('sbt "run ',args,'"'))
return(
list(
sim=read.csv(file='res/popsim.csv'),
real=read.csv(file='res/poptarget.csv')
)
)
}
runRestrMarius<-function(system,economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay){
return(runmodel(paste0(c("Marius ",system,economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay),collapse = ' ')))
}
runMarius<-function(system,economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay,wealthToPopulationExponent,populationToWealthExponent){
return(runmodel(paste0(c("Marius ",system,economicMultiplier,sizeEffectOnSupply,sizeEffectOnDemand,distanceDecay,wealthToPopulationExponent,populationToWealthExponent),collapse = ' ')))
}
runGibrat<-function(system,growthRate){
return(runmodel(paste0(c("Coevolution ",system,growthRate),collapse=' ')))
}
runIntgib<-function(system,growthRate,gravityWeight,gravityGamma,gravityDecay){
return(runmodel(paste0(c("Coevolution ",system,growthRate,gravityWeight,gravityGamma,gravityDecay),collapse=' ')))
}
show(runGibrat(system,0.0334))
source('../Analysis/functions.R')
cpop[cpop$logmse==min(cpop$logmse),'model']
cpop[cpop$logmse==min(cpop$logmse),]
show(runIntgib(system,0.0301,0.00184,0.1,17.6))
runmodel<-function(args){
system(paste0('sbt "run ',args,'"'))
sim = read.csv(file='res/popsim.csv',header = F)
X=c();Y=c()
for(j in 2:ncol(sim)){X=append(X,sim[,j-1]);Y=append(Y,sim[,j])}
# read.csv(file='res/poptarget.csv',header=F)
return(list(X=X,Y=Y))
}
cpop[cpop$logmse==min(cpop$logmse),]
data.frame(cpop[cpop$logmse==min(cpop$logmse),])
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestintgib
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
AIC(p1) - AIC(p2)
BIC(p1) - BIC(p2)
countrycodes
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
daicmselog
dbicmselog
library(knitr)
knitr::kable(cbind(countrycodes,res))
head(res)
res=data.frame()
res=data.frame()
for(system in countrycodes){
show(system)
cpop = pop[pop$system==system,]
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
res=rbind(res,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(countrycodes,res))
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
M1$X
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
data.frame(X=M2$X,Y=M2$Y)
M2
bestintgib
bestgib
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,1.0,bestintgib$gravityWeight)
M1 = runGibrat(system,bestgib$growthRate)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
M1
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,1.0,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
systems = c('ZA','CN','US','BR','IN','RU')
systems = c('ZA','CN','US','BR','IN','RU')
#system='CN'
res=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,1.0,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
res=rbind(res,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,res))
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
cpop$model=='intgib'
min(cpop$mselog[cpop$model=='intgib'])
systems = c('CN','US','BR','IN','RU')
#system='CN'
res=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,1.0,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityWeight)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
res=rbind(res,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,res))
systems = c('CN','US','BR','IN','RU')
#system='CN'
res=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityDecay)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityDecay)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
res=rbind(res,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,res))
res
systems = c('ZA','CN','BR','IN','RU')
res=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$logmse[cpop$model=='intgib']==min(cpop$logmse[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$logmse[cpop$model=='gibrat']==min(cpop$logmse[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityDecay)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestintgib = data.frame(cpop[cpop$model=='intgib'&cpop$mselog[cpop$model=='intgib']==min(cpop$mselog[cpop$model=='intgib']),])
bestgib = data.frame(cpop[cpop$model=='gibrat'&cpop$mselog[cpop$model=='gibrat']==min(cpop$mselog[cpop$model=='gibrat']),])
M1 = runGibrat(system,bestgib$growthRate)
M2 = runIntgib(system,bestintgib$growthRate,bestintgib$gravityWeight,bestintgib$gravityGamma,bestintgib$gravityDecay)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),1)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),4)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
res=rbind(res,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,res))
warnings()
system='CN'
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
bestmarius
systems = c('ZA','CN','BR','IN','RU')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
system
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
systems = c('CN','BR','IN','RU','EU','US')
systems = c('CN','BR','IN','RU','EU','US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
systems = c('BR','IN','RU','EU','US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
systems = c('IN','RU','EU','US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
systems = c('RU','EU','US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
systems = c('EU','US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
systems = c('US')
resmarius=data.frame()
for(system in systems){
show(system)
cpop = pop[pop$system==system,]
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$logmse[cpop$model=='marius']==min(cpop$logmse[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$logmse[cpop$model=='mariusrestr']==min(cpop$logmse[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daiclogmse = AIC(p1) - AIC(p2);dbiclogmse = BIC(p1) - BIC(p2)
bestmarius = data.frame(cpop[cpop$model=='marius'&cpop$mselog[cpop$model=='marius']==min(cpop$mselog[cpop$model=='marius']),])
bestmariusrestr = data.frame(cpop[cpop$model=='mariusrestr'&cpop$mselog[cpop$model=='mariusrestr']==min(cpop$mselog[cpop$model=='mariusrestr']),])
M1 = runRestrMarius(system,bestmariusrestr$economicMultiplier,bestmariusrestr$sizeEffectOnSupply,bestmariusrestr$sizeEffectOnDemand,bestmariusrestr$distanceDecay)
M2 = runMarius(system,bestmarius$economicMultiplier,bestmarius$sizeEffectOnSupply,bestmarius$sizeEffectOnDemand,bestmarius$distanceDecay,bestmarius$populationToWealthExponent,bestmarius$wealthToPopulationExponent)
p1 = polFit(data.frame(X=M1$X,Y=M1$Y),4)
p2 = polFit(data.frame(X=M2$X,Y=M2$Y),6)
daicmselog = AIC(p1) - AIC(p2);dbicmselog = BIC(p1) - BIC(p2)
resmarius=rbind(resmarius,c(daiclogmse,dbiclogmse,daicmselog,dbicmselog))
}
knitr::kable(cbind(systems,resmarius))
