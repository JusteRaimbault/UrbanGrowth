val areaind = 100
val startyear = 1975
val endyear = 1990

import java.util.Date
import java.text.SimpleDateFormat

val popvals = scala.io.Source.fromFile(workDirectory / "configs" / (areaind.toString+"_"+startyear.toString+".csv")).getLines.map{s =>
    s.split(";").map{ss => if(ss.equals("NA")) Double.NaN else ss.toDouble}.toArray
}.toArray

// Config
val morphofile = Val[File]
val targetarea = Val[Int]
val targetyear = Val[Int]
val initialpop = Val[Array[Array[Double]]]

// Parameters
val alpha = Val[Double]
val beta = Val[Double]
val tsteps = Val[Double]

val seed = Val[Long]

// Objective
val mse = Val[Double]


val model =
  ScalaTask(
    """
      |val pop = initialpop.map{_.toSeq}.toSeq
      |val objs = density.reactiondiffusion.CSV.readCSVFile(morphofile,";")
      |val targetPop = objs("totalPop"+targetyear)(targetarea-1).toDouble
      |val targetMoran = objs("moran"+targetyear)(targetarea-1).toDouble
      |val targetAvgDist = objs("avgDist"+targetyear)(targetarea-1).toDouble
      |val targetEntropy = objs("entropy"+targetyear)(targetarea-1).toDouble
      |val targetSlope = objs("alpha"+targetyear)(targetarea-1).toDouble
      |
      |val calib = density.reactiondiffusion.ReactionDiffusionCalibration(pop,alpha,beta,1.0,tsteps,targetPop,targetMoran,targetAvgDist,targetEntropy,targetSlope,seed)
      |val mse = calib.runModel
    """.stripMargin
  ) set (
    plugins += pluginsOf[density.reactiondiffusion.ReactionDiffusionCalibration],
    (inputs,outputs) += (initialpop,morphofile,targetarea,targetyear,alpha,beta,tsteps,seed),
    outputs += (mse),
    initialpop := popvals,
    morphofile := (workDirectory / "configs" / "morphologies.csv"),
    targetarea := areaind,
    targetyear := endyear
  )

val purpose = "MESOCALIB_CALIB_LOCAL20"
val datestr = (new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()).toString
val resdir = purpose+"_"+areaind.toString+"_"+endyear.toString+"_"+datestr

//val env = LocalEnvironment(20)
val env = EGIEnvironment("vo.complex-systems.eu")


val evolution =
  NSGA2Evolution(
    genome =
      Seq(
        alpha in Range(0.0, 10.0),
        beta in Range(0.0,0.5),
        tsteps in Range(1.0,100.0)
      ),
      mu = 50,
      objectives = Seq(mse),
      evaluation = model,
      stochastic = Stochastic(seed = seed),
      termination = 10000,
      parallelism = 1000,
      distribution = Island(5 minutes)
)

val savePopulation = SavePopulationHook(evolution, workDirectory / "calibration" / resdir, 1000)


(evolution on env hook savePopulation)

  
